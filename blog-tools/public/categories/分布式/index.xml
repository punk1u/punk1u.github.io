<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on 想自由的Punk 1u</title>
    <link>https://punk1u.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on 想自由的Punk 1u</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>punk1u&lt;br/&gt;版权所有ICP证：&lt;a href=&#39;http://beian.miit.gov.cn&#39; target=&#39;_blank&#39;&gt;浙ICP备19032348号-1&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 18 Jan 2021 12:29:39 +0800</lastBuildDate><atom:link href="https://punk1u.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分库分表</title>
      <link>https://punk1u.github.io/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</link>
      <pubDate>Mon, 18 Jan 2021 12:29:39 +0800</pubDate>
      
      <guid>https://punk1u.github.io/post/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</guid>
      <description>分库分表 分库分表概述 当数据库性能出现瓶颈时，可以通过分库分表来提高性能。 拆分方式 水平拆分 每个表结构都一样，比如订单表数据量较大，可以拆分成多</description>
    </item>
    
    <item>
      <title>分布式限流</title>
      <link>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81/</link>
      <pubDate>Sun, 17 Jan 2021 12:29:39 +0800</pubDate>
      
      <guid>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E9%99%90%E6%B5%81/</guid>
      <description>分布式限流 限流常见算法： 计数器算法 采用计数器实现限流有点简单粗暴，一般我们会限制一秒钟的能够通过的请求数，比如限流qps为100，算法的实现</description>
    </item>
    
    <item>
      <title>分布式任务调度</title>
      <link>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Tue, 12 Jan 2021 12:29:39 +0800</pubDate>
      
      <guid>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</guid>
      <description>分布式任务调度 场景 报表统计 需要每天或者定时调度产生的报表。 日/月结单 金融/支付领域按时结单。 爬虫 定时爬取内容。 数据归档 数据量较大时，定时进行</description>
    </item>
    
    <item>
      <title>分布式session</title>
      <link>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8Fsession/</link>
      <pubDate>Wed, 06 Jan 2021 12:29:39 +0800</pubDate>
      
      <guid>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8Fsession/</guid>
      <description>分布式session 传统Session 传统Session实现 传统单机Session实现方式： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 @RestController @RequestMapping(&amp;#34;/user&amp;#34;) public class</description>
    </item>
    
    <item>
      <title>分布式ID</title>
      <link>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8Fid/</link>
      <pubDate>Thu, 31 Dec 2020 12:29:39 +0800</pubDate>
      
      <guid>https://punk1u.github.io/post/%E5%88%86%E5%B8%83%E5%BC%8Fid/</guid>
      <description>分布式ID 实现方式 号段模式 每次批量获取ID，将ID列表缓存在本地，提升效率。不需要每次都去请求ID。直到当前号段用完了，才去获取下一号段。 雪</description>
    </item>
    
  </channel>
</rss>
